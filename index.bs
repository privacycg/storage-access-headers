<pre class='metadata'>
Title: Storage Access Headers
Shortname: storage-access-headers
Level: None
Status: w3c/UD
Repository: cfredric/storage-access-headers
URL: https://cfredric.github.io/storage-access-headers
Editor: Chris Fredrickson, Google https://google.com, cfredric@google.com
Abstract: TODO: A short description of your spec, one or two sentences.
Markup Shorthands: markdown yes, css no
Complain About: accidental-2119 yes, missing-example-ids yes
Assume Explicit For: yes
Die On: warning
WPT Path Prefix: TODO-API-LABEL
WPT Display: closed
Include MDN Panels: if possible
Include Can I Use Panels: yes
</pre>
<pre class="biblio">
{
  "I-D.structured-field-values-for-http": {
    "authors": [ "Mark Nottingham", "Poul-Henning Kamp" ],
    "href": "https://datatracker.ietf.org/doc/html/rfc8941",
    "title": "Structured Field Values for HTTP",
    "status": "ID",
    "publisher": "IETF"
  }
}
</pre>

<pre class="link-defaults">
spec: infra
    type: dfn
        text: user agent
</pre>

<pre class="anchors">
urlPrefix: https://datatracker.ietf.org/doc/html/rfc8941; spec: I-D.structured-field-values-for-http
    type: dfn
        text: structured field; url: #
    for: structured field
        type: dfn
            text: item; url: #name-items
            text: string; url: #name-strings
            text: token; url: #name-tokens
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    type: dfn
        text: source snapshot params; url: browsing-the-web.html#source-snapshot-params
        text: snapshotting source snapshot params; url: browsing-the-web.html#snapshotting-source-snapshot-params
        text: create navigation params by fetching; url: browsing-the-web.html#create-navigation-params-by-fetching
        text: set up a window environment settings object; url: nav-history-apis.html#set-up-a-window-environment-settings-object
        text: environment
spec: storage-access; urlPrefix: https://privacycg.github.io/storage-access/
    type: dfn
        text: determine whether the user agent explicitly allows unpartitioned cookie access; url: #determine-whether-the-user-agent-explicitly-allows-unpartitioned-cookie-access
    for: environment
        type: dfn
            text: has storage access; url: #environment-has-storage-access
    for: source snapshot params
        type: dfn
            text: has storage access; url: #source-snapshot-params-has-storage-access
            text: environment id; url: source-snapsnot-params-environment-id
urlPrefix: https://fetch.spec.whatwg.org/
    type: dfn
        text: append a request Origin header; url: #append-a-request-origin-header
        for: response
            text: has-cross-origin-redirects; url: #response-has-cross-origin-redirects
        text: main fetch; url: #concept-main-fetch
        text: fetch params; url: #fetch-params
</pre>

Introduction {#intro}
=====================

For now, see the [explainer](https://github.com/privacycg/storage-access-headers).

See [https://garykac.github.io/procspec/](https://garykac.github.io/procspec/),
[https://dlaliberte.github.io/bikeshed-intro/index.html](https://dlaliberte.github.io/bikeshed-intro/index.html),
and [https://speced.github.io/bikeshed/](https://speced.github.io/bikeshed/) to get started on your
specificaton.

Storage-Access Request Infrastructure {#request-infrastructure}
===============================================================

A <dfn>cookie access flagset</dfn> is a struct that holds data related to the cookie accesses allowable in a given context.

A [=cookie access flagset=] has a boolean [=struct/item=] <dfn for="cookie access flagset">eligible for storage-access</dfn>. This indicates whether the relevant third-party site allows the relevant "<a permission><code>storage-access</code></a>" permission grant to be used to allow access to cookies, if it exists. Unless stated otherwise it is unset.

NOTE: The [=user agent=] is expected to read this struct, and in particular the [=cookie access flagset/eligible for storage-access=] boolean, when attaching cookies to an outgoing [=request=]. It is not yet possible to specify this, since the cookie store has no defined interface that specs can interact with.

A [=request=] has an associated <dfn for="request">cookie access flagset</dfn>, a [=cookie access flagset=].

NOTE: A [=request=] also has a [=request/client=], which is an [=environment settings object=] (a kind of [=environment=]) and therefore has a [=environment/has storage access=] boolean. That value is distinct from the [=request=]'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] boolean.

A [=request=] has an associated <dfn for="request">single-hop cache mode</dfn>, whose value is null or a [=request/cache mode=]. 

A [=request=]'s [=request/cache mode=] field is renamed to <dfn for="request">internal cache mode</dfn>.

<div algorithm="request cache mode">
A [=request=]'s <dfn for="request" export>cache mode</dfn> is the cache mode returned by running the following steps, given a [=request=] |request|:
    1. If |request|'s [=request/single-hop cache mode=] is not null, return |request|'s [=request/single-hop cache mode=].
    1. Return |request|'s [=request/internal cache mode=].
</div>

A <dfn>storage access status</dfn> is one of "`none`", "`inactive`", or "`active`".

<div algorithm>
    To <dfn for=request>compute the storage access status</dfn> for a [=request=] |request|, run the following steps. This algorithm returns null or a [=storage access status=].
        1. If the user agent's cookie store would attach cookies with the `SameSite=Strict` attribute to |request|, return null.[[!COOKIES]]
        1. Let |allowed| be a [=boolean=], initially set to the result of determining whether the user agent's cookie store allows unpartitioned cookies to be attached to |request|.
        1. If |allowed| is true, return "`active`".
        1. If |request|'s [=request/client=]'s [=environment settings object=]'s [=environment/has storage access=] is false, and |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] is false, then:
            1. Set |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] to true.
            1. Set |allowed| to be the result of determining whether the user agent's cookie store allows unpartitioned cookies to be attached to |request|.
            1. Set |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] to false.
            1. If |allowed| is true, return "`inactive`".
        1. Return "`none`".
</div>

NOTE: The Fetch specification does not yet provide an interface through which other specifications can interact with the cookie store, so it is not yet possible to express the above algorithm with the appropriate level of rigor. Once the cookie store has a well-defined interface that is usable from other specifications, this algorithm can make use of it.


Storage-Access Headers {#headers}
===================================

The following sections define a request and response header. The request header
exposes information about the [=request=]'s access to cookies to a server. The
response header allows a server to opt into accessing cross-site cookies on a
particular request or when loading a resource. 

The `Sec-Fetch-Storage-Access` HTTP Request Header {#sec-fetch-storage-access-header}
-----------------------------------------------------------------

The <dfn http-header export>`Sec-Fetch-Storage-Access`</dfn> HTTP request header exposes a [=request=]'s
ability to access cookies to a server. It is a [=Structured Field=] [=structured field/item=] whose value MUST be a
[=structured field/token=]. [[!I-D.structured-field-values-for-http]] Its ABNF is:

```
Sec-Fetch-Storage-Access = sf-token
```

Valid `Sec-Fetch-Storage-Access` values include "`none`", "`inactive`", and
"`active`". In order to support forward-compatibility with as-yet-unknown
semantics, servers SHOULD ignore this header if it contains an invalid value.

<pre class="example" id="sec-fetch-storage-access-usage">

// When the request's credentials mode is "`omit`", the header is omitted:


// When the request is same-site, the header is omitted:


// When the request has no access to cross-site cookies, the header is "none":
Sec-Fetch-Storage-Access: none

// When the request has no access to cross-site cookies, but the
// `storage-access` permission has already been granted, the header is
// "inactive":
Sec-Fetch-Storage-Access: inactive

// When the request has access to cross-site cookies, the header is "active":
Sec-Fetch-Storage-Access: active

</pre>

<div algorithm>
    To <dfn export lt="set-storage-access">set the `Sec-Fetch-Storage-Access` header</dfn> for a [=request=] |request|:

    <ol class="algorithm">
        1.  Assert: |request|'s [=request/url=] is a [=potentially trustworthy URL=].
        1. If |request|'s [=request/credentials mode=] [=string/is=] not "`include`", abort these steps.
        1.  Let |access| be the result of [=request/compute the storage access status|computing the storage access status=] given |request|.
        1.  If |access| is null, abort these steps.
        1.  Let |value| be a [=Structured Field=] value whose value is a [=structured field/token=].
        1.  Set |value|'s value to |access|.
        1.  [=header list/Set a structured field value=] given ("`Sec-Fetch-Storage-Access`", |value|) in |request|'s [=request/header list=].
    </ol>
</div>


The `Activate-Storage-Access` HTTP Response Header {#activate-storage-access-header}
-------------------------------------------------------------------------------------

The <dfn http-header export>`Activate-Storage-Access`</dfn> HTTP response header
allows a server to opt in to accessing its cookies in a cross-site request
context. It is a [=Structured Field=] [=structured field/item=] whose value MUST be a [=structured
field/token=]. [[!I-D.structured-field-values-for-http]] Its ABNF is:

```
Activate-Storage-Access = sf-item
```

Valid `Activate-Storage-Access` values include "`load`" and "`retry`". In order
to support forward-compatibility with as-yet-unknown semantics, servers SHOULD
ignore this header if it contains an invalid value.

The following parameter is defined:

* A parameter whose key is "`allowed-origin`", and whose value is a [=structured field/string=]. See below for processing requirements.

<pre class="example" id="activate-storage-access-usage">

// The server's response requests that the user agent activate storage access
// before continuing with the load of the resource.
Activate-Storage-Access: load

// The server's response requests that the user agent activate storage access,
// then retry the request. The "allowed-origin" parameter allowlists the
// request's origin.
Activate-Storage-Access: retry; allowed-origin="https://foo.bar"

// Same as above, but using a wildcard instead of explicitly naming the request's Origin.
Activate-Storage-Access: retry; allowed-origin=*
</pre>

<div algorithm>
    To <dfn export>perform a storage access retry check</dfn> for a [=request=] |request| and [=response=] |response|, run the following steps:

    <ol class="algorithm">
        1. If |request|'s [=request/credentials mode=] [=string/is=] not "`include`", return failure.
        1. If |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] is true, return failure.
        1. Let |storageAccessStatus| be the result of [=request/compute the storage access status|computing the storage access status=] given |request|.
        1. If |storageAccessStatus| [=string/is=] not "`inactive`", return failure.
        1. Let |parsedHeader| be the result of [=header list/get a structured field value|getting a structured field value=] given "`Activate-Storage-Access`" and "`item`" from |response|'s [=response/header list=].
        1. If |parsedHeader| is null, return failure.
        1. Let (|value|, |params|) be |parsedHeader|.
        1. If |value| is not a Token, return failure.
        1. If |value| [=string/is=] not "`retry`", return failure.
        1. If |params|["allowed-origin"] does not exist, return failure.
        1. Let |allowedOrigin| be |params|["allowed-origin"].
        1. If |allowedOrigin| is a Token whose value is "`*`", return success.
        1. If |allowedOrigin| is not a String, return failure.
        1. Let |expectedOrigin| be the result of [=header list/get|getting=] "`Origin`" from |request|'s [=request/header list=].
        1. If |expectedOrigin| is null, return failure.
        1. If |allowedOrigin|'s value [=string/is=] |expectedOrigin|, return success.
        1. Return failure.
    </ol>
</div>


<div algorithm>
    To <dfn export>perform a storage access load check</dfn> for a [=request=] |request| and [=response=] |response|, run the following steps:

    <ol class="algorithm">
        1. Let |storageAccessStatus| be the result of [=request/compute the storage access status|computing the storage access status=] given |request|.
        1. If |storageAccessStatus| [=string/is=] not one of "`inactive`" or "`active`", return failure.
        1. Let |parsedHeader| be the result of [=header list/get a structured field value|getting a structured field value=] given "`Activate-Storage-Access`" and "`item`" from |response|'s [=response/header list=].
        1. If |parsedHeader| is null, return failure.
        1. Let (|value|, <var ignore>params</var>) be |parsedHeader|.
        1. If |value| is not a Token, return failure.
        1. If |value| [=string/is=] not "`load`", return failure.
        1. Return success.
    </ol>
</div>

Integration with Fetch Metadata {#fetch-metadata-integration}
==============================================

The [:Sec-Fetch-Storage-Access:] header is appended to outgoing requests alongside other Fetch Metadata headers. Modify the definition of [$append the Fetch metadata headers for a request$] by inserting the following as step 6:

<div algorithm="append the Sec-Fetch-Storage-Access header">
    6.  <a lt='set-storage-access'>Set the `Sec-Fetch-Storage-Access` header</a> for <var ignore>r</var>.
</div>

Integration with Fetch {#fetch-integration}
===========================================

## Origin header ## {#origin-header-integration}

When making a decision on whether to retry a request and force it to include cross-site cookies, a server ought to be informed as to the initiator of the request. I.e., the request ought to include the [:Origin:] header whenever it also includes the `Sec-Fetch-Storage-Access: inactive` header. Modify the definition of [=append a request Origin header=] by rewriting step 4 as:

<div algorithm="modified append a request Origin header">
    4. Let |storageAccessStatus| be the result of [=request/compute the storage access status|computing the storage access status=] given |request|.
    5. Otherwise, if |storageAccessStatus| is "`inactive`" or |request|'s [=request/method=] is neither \``GET`\` nor \``HEAD`\`, then:
</div>

## HTTP-fetch ## {#http-fetch}

Insert a new step after step 5 in [=HTTP fetch=]:

<div algorithm="modified HTTP-fetch">
    6. If the result of [=perform a storage access retry check|performing a storage access retry check=] for |request| is success, then:
        1. Set |response| to the result of running [=HTTP-storage-access-retry-fetch=] given |request|, <var ignore>fetchParams</var>, and |response|.
        1. Return |response|.
</div>

<div algorithm>
    To <dfn export>HTTP-storage-access-retry-fetch</dfn> given a [=fetch params=] |fetchParams|, run the following steps:

    1. Let |request| be |fetchParams|'s [=request=].
    1. Assert: the result of [=request/compute the storage access status|computing the storage access status=] given |request| [=string/is=] "`inactive`".
    1. Assert: |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] is false.
    1. If |request|'s [=request/redirect count=] is 20, then return a [=network error=].
    1. Increase |request|'s [=request/redirect count=] by 1.
    1. [=list/Append=] |request|'s [=request/url=] to |request|'s [=request/URL list=].
    1. Set |request|'s [=request/single-hop cache mode=] to "`reload`".
    1. Set |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] to true.
    1. Assert: the result of [=request/compute the storage access status|computing the storage access status=] given |request| [=string/is=] "`active`".
    1. Let |recursive| be true.
    1. Return the result of running [=main fetch=] given |fetchParams| and |recursive|.
</div>

## HTTP-redirect-fetch ## {#http-redirect-fetch}

Insert a new step after step 17 in [=HTTP-redirect fetch=]:

<div algorithm="modified HTTP-redirect fetch">
    18. If <var ignore>locationURL</var>'s [=url/origin=] is not [=same origin=] to |request|'s [=request/url=]'s [=url/origin=], set |request|'s [=request/cookie access flagset=]'s [=cookie access flagset/eligible for storage-access=] to false.
</div>

Integration with HTML {#html-integration}
=========================================

## Changes to navigation ## {#navigation-integration}

This integration builds upon the changes introduced by the Storage Access API specification.[[!storage-access]] In particular, modify the changes when creating the request's [=request/reserved client=] in [=create navigation params by fetching=] to be the following:

<div algorithm="modified create navigation params by fetching">
    1. Let |compute has storage access| be an algorithm with the following steps, which return a boolean:
        1. If |response| is not null and the result of [=performing a storage access load check=] given |request| and |response| is success, return true.
        1. If <var ignore>sourceSnapshotParams</var>'s [=source snapshot params/environment id=] does not equal <var ignore>navigable</var>'s [=navigable/active document=]'s [=relevant settings object=]'s [=environment/id=], return false.
        1. If <var ignore>originalURL</var>'s [=url/origin=] is not [=same origin=] with <var ignore>currentURL</var>'s [=url/origin=], return false.
        1. If |response| is not null and |response|'s [=response/has-cross-origin-redirects=] is true, return false.
        1. Return true.
    1. Set |request|'s [=request/reserved client=]'s [=environment/has storage access=] to the result of executing |compute has storage access|.
</div>